#!/usr/bin/env bash

### Create some temp files so we can cache output
attr=$(mktemp)
smart=$(mktemp)
lsslot=$(mktemp)
lsblock=$(mktemp)

lsslot  > "${lsslot}"
lsblock > "${lsblock}"

rm -f /tmp/sfs_smartctl_*
for drive in $(grep "disk" "${lsblock}" | awk '{ print $1 }' | cut -d "/" -f 3)
do
	smartctl -a /dev/${drive} > /tmp/sfs_smartctl_${drive} &
done
# Wait for background smartctl's to complete
running=$(jobs | grep -c Running)
while [ "${running}" -ne "0" ]
do
	sleep 1
	running=$(jobs | grep -c Running)
done

grep "disk" < "${lsblock}" | awk '{ print $1 }' | while IFS= read -r dev
do

	dev_small=$(echo ${dev} | cut -d "/" -f 3)

#	TIME_START=$(date +%s)

#	echo -n "$(date) - Scanning ${dev}... - "

#	DBG_TIME_START=$(date +%s)
#	echo -n "	Running smartctl on ${dev}..."
#	sudo smartctl -a "${dev}" | sudo tee "/tmp/sfs_smartctl_${dev_small}" > /dev/null
#	DBG_TIME_END=$(date +%s)
#	DBG_TIME_DIFF=$((DBG_TIME_END - DBG_TIME_START))
#	echo -n " ${DBG_TIME_DIFF} secs elapsed for SMART, "


	# Determine if it's a ssd or hard drive
	disk_type=$(grep " ${dev} " "${lsblock}" | tr " " "\n" | grep "disk:" | cut -d ":" -f 2)

	# If it's a hard drive, fetch the rid (I should rewrite this to handle hard drives which *aren't* rids...)
	rid="norid"
	if [ "${disk_type}" == "hd" ]; then
		rid=$(grep "${dev} " "${lsslot}" | awk '{ print $10 }' | uniq)

		if [ -z "${rid}" ] || [ "${rid}" == "norid" ] || [ "${rid}" == "NORID" ] || [ "${rid}" == "Empty" ]; then
			rid=$(grep " ${dev} " "${lsblock}" | awk '{ print $2 }' | uniq)
		fi


		if [ -z "${rid}" ] || [ "${rid}" == "norid" ] || [ "${rid}" == "NORID" ] || [ "${rid}" == "Empty" ]; then
			rid=$(grep "^${dev} " "${lsblock}" | awk '{ print $2 }')
		fi

	fi

	HD_Size=$(grep " ${dev} " "${lsblock}" | awk '{ print $11 }')
	HD_Vendor=$(grep " ${dev} " "${lsblock}" | awk '{ print $5 }')
	HD_Model=$(grep " ${dev} " "${lsblock}" | awk '{ print $6 }')

	HD_Capacity="UNKNOWN"
	case ${HD_Size} in
		40020664320)
			HD_Capacity="40 GB" ;;
		60022480896)
			HD_Capacity="60 GB" ;;
		115033153536)
			HD_Capacity="115 GB" ;;
		120034123776)
			HD_Capacity="120 GB" ;;
		240057409536)
			HD_Capacity="240 GB" ;;
		2000398934016)
			HD_Capacity="2 TB" ;;
		3000592982016)
			HD_Capacity="3 TB" ;;
		4000787030016)
			HD_Capacity="4 TB" ;;
		8001563222016)
			HD_Capacity="8 TB" ;;
		64012505776128)
			HD_Capacity="8 TB" ;;
 		10000831348736)
 			HD_Capacity="10 TB" ;;
		12000138625024)
			HD_Capacity="12 TB" ;;
	esac

	### Check for major drive failure
	Health=$(grep "SMART Health Status" "/tmp/sfs_smartctl_${dev_small}" | cut -d ":" -f 2- | grep -v " OK$")
	if [ ! -z "${Health}" ]; then
			printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} is urgently failing!  ${Health}\n" "${dev}"
	fi

	# Assume drives are SATA by default, since most are...
	SAS=0
	SAS_QUERY=$(grep -i "Transport protocol:" "/tmp/sfs_smartctl_${dev_small}" | grep -c SAS)
	[ "${SAS_QUERY}" -eq "1" ] && SAS=1

	if [ "${SAS}" == 0 ]; then

		# These are SMART attributes that we don't want to alert if they are marginal/failing
		IGNORE_THESE_ATTRIBUTES="High_Fly_Writes|Load_Cycle_Count"

		# Fetch info on the remaining SMART attributes...
		grep -E "(Old_age|Pre-fail)" "/tmp/sfs_smartctl_${dev_small}" | sed "s/^ *//" | grep "^[1-9]" | awk '{ print $1,$2,$4,$5,$6,$10 }' | grep -Ev "(${IGNORE_THESE_ATTRIBUTES}|Not_testing)" > "${attr}"

		# Fetch the SMART self-test execution status
		status=$(grep -A 5 "Self-test execution status" "/tmp/sfs_smartctl_${dev_small}" | grep -B 5 "Total time to complete Offline" | grep -v "Total time to complete Offline" | tr "\n" " " | tr "\t" " " | sed "s/  */ /g" | sed "s/( /(/")

		if [[ "${status}" =~ "The previous self-test completed having the read element of the test failed" ]]; then
			printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} is failing a read-element test\n" "${dev}"
		fi

		if [[ "${status}" =~ "The previous self-test completed having a test element that failed and the test element that failed is not known" ]]; then
			printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} is failing a test-element test\n" "${dev}"
		fi

		# Iterate over all SMART attributes
		grep "^[1-9]" < "${attr}" | cut -d " " -f 1 | while IFS= read -r attribute
		do

			  ATTR_NAME=$(grep "^${attribute} " "${attr}" | cut -d " " -f 2)
			CURRENT_VAL=$(grep "^${attribute} " "${attr}" | cut -d " " -f 3 | sed "s/^0*//") ; [ -z "${CURRENT_VAL}" ] && CURRENT_VAL=0
			MAXIMUM_VAL=$(grep "^${attribute} " "${attr}" | cut -d " " -f 4 | sed "s/^0*//") ; [ -z "${MAXIMUM_VAL}" ] && MAXIMUM_VAL=0
			 THRESH_VAL=$(grep "^${attribute} " "${attr}" | cut -d " " -f 5 | sed "s/^0*//") ; [ -z "${THRESH_VAL}"  ] && THRESH_VAL=0
			   REAL_VAL=$(grep "^${attribute} " "${attr}" | cut -d " " -f 6 | sed "s/^0*//") ; [ -z "${REAL_VAL}"    ] && REAL_VAL=0

			################################
			### Begin special case handling
			################################

			# This is a corner case where the val and thresh are all 0.  Just ignore
			if [ "${CURRENT_VAL}" -eq "0" ] && [ "${MAXIMUM_VAL}" -eq "0" ] && [ "${THRESH_VAL}" -eq "0" ]; then
				# There's no good way to know if the drive is actually failing, or if this test is screwy.  Just skip.
				continue
			fi

			# One Intel SSD has a buggy 233 Media_Wearout_Indicator, so ignore that special case
			is_bad_intel_ssd=$(grep " ${dev} " "${lsblock}" | grep -c SSDSA2M040G2GC)
			if [ "${attribute}" -eq "233" ] && [ "${is_bad_intel_ssd}" -eq "1" ]; then
				continue
			fi

			# This is another indicator of a drive going bad that doesn't officially fail SMART
			THRESH_197="500"
			if [ "${attribute}" -eq "197" ]; then
				if [ "${REAL_VAL}" -ge "${THRESH_197}" ]; then
					printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has a 197_Current_Pending_Sector value over ${THRESH_197}\n" "${dev}"
				fi
			fi

			################################
			### End special case handling
			################################

			DELTA_CURRENT=$(echo "${CURRENT_VAL}-${THRESH_VAL}" | bc -l)
			[ -z "${DELTA_CURRENT}" ] && DELTA_CURRENT=0

			if [ "${DELTA_CURRENT}" -le "0" ]; then
				printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} is failing  on SMART attribute %-3s ${ATTR_NAME}\n" "${dev}" "${attribute}"
			elif [ "${DELTA_CURRENT}" -lt "10" ] && [ "${DELTA_CURRENT}" -gt 0 ] && [ "${THRESH_VAL}" -lt "50" ]; then
				# Skip the drives with marginal Power_On_Hours
				[ "${ATTR_NAME}" == "Power_On_Hours" ] && continue
				printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} is marginal on SMART attribute %-3s ${ATTR_NAME}\n" "${dev}" "${attribute}"
			fi
		done
	else

		# Assume drive is SAS
		Defects=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep "Elements in grown defect list" | cut -d ":" -f 2 | awk '{ print $1 }')
		[ -z "${Defects}" ] && Defects=0

		# Don't even both printing it if it's just one or two defects
		if [ "${Defects}" -gt "0" ]; then

			if [ "${Defects}" -gt "50" ]; then
				printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has a critically-high number of defects (${Defects} defects)\n" "${dev}"
			else
				printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has a non-zero number of defects (${Defects} defects)\n" "${dev}"
			fi
		fi

# Disable this for general testing, but uncomment if you're trying to 
# find depots with bad HBA's or cabling
		NonMedium=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep "^Non-medium error count:" | cut -d ":" -f 2 | awk '{ print $1 }')
		[ -z "${NonMedium}" ] && NonMedium="0"

		if [ "${NonMedium}" -gt "0" ]; then
			printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has a non-zero number of Non-medium errors (${NonMedium})\n" "${dev}"
		fi

		smart_failing=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep -i "A mandatory SMART command failed" | wc -l)

		if [ "${smart_failing}" -gt "0" ]; then
			printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} is failing mandatory SMART commands\n" "${dev}"
		fi

		total_read_uncorrected_errors=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep "^read:" | rev | cut -d " " -f 1 | rev)
		[ -z "${total_read_uncorrected_errors}" ] && total_read_uncorrected_errors=0
		[ "${total_read_uncorrected_errors}" -gt 10 ] && printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has total read uncorrected errors greater than 10 (${total_read_uncorrected_errors})\n" "${dev}"

		total_write_uncorrected_errors=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep "^write:" | rev | cut -d " " -f 1 | rev)
		[ -z "${total_write_uncorrected_errors}" ] && total_write_uncorrected_errors=0
		[ "${total_write_uncorrected_errors}" -gt 10 ] && printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has total write uncorrected errors greater than 10 (${total_write_uncorrected_errors})\n" "${dev}"

		read_correction_algorithm_invocations=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep "^read:" | rev | awk '{ print $3 }' | rev)
		[ -z "${read_correction_algorithm_invocations}" ] && read_correction_algorithm_invocations=0
		[ "${read_correction_algorithm_invocations}" -gt "10" ] && printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has read correction algorithm invocations greater than 10 (${read_correction_algorithm_invocations})\n" "${dev}"

		write_correction_algorithm_invocations=$(cat "/tmp/sfs_smartctl_${dev_small}" | egrep "^write:" | rev | awk '{ print $3 }' | rev)
		[ -z "${write_correction_algorithm_invocations}" ] && write_correction_algorithm_invocations=0
		[ "${write_correction_algorithm_invocations}" -gt "10" ] && printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has write correction algorithm invocations greater than 10 (${write_correction_algorithm_invocations})\n" "${dev}"

		smart_test_segment_failure=$(cat "/tmp/sfs_smartctl_${dev_small}" | grep "Failed in segment" | wc -l)
		[ -z "${smart_test_segment_failure}" ] && smart_test_segment_failure=0
		[ "${smart_test_segment_failure}" -gt "0" ] && printf "Dev %-9s Rid ${rid} ${disk_type} ${HD_Vendor} ${HD_Model} ${HD_Capacity} has SMART test failed in segment errors (${smart_test_segment_failure})\n" "${dev}"

#	TIME_END=$(date +%s)
#	TIME_DIFF=$((TIME_END - TIME_START))
#	echo " ${TIME_DIFF} secs"

	fi
done

rm -f "${attr}" "${lsslot}" "${lsblock}" "/tmp/sfs_smartctl_*"
