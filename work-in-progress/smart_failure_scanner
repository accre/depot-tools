#!/usr/bin/env python

import os
import re
import sys
import multiprocessing

Size_Dict = {}
Size_Dict["40020664320"] =   "40 GB"
Size_Dict["60022480896"] =   "60 GB"
Size_Dict["115033153536"] =  "115 GB"
Size_Dict["120034123776"] =  "120 GB"
Size_Dict["240057409536"] =  "240 GB"
Size_Dict["2000398934016"] = "2 TB"
Size_Dict["3000592982016"] = "3 TB"
Size_Dict["4000787030016"] = "4 TB"
Size_Dict["8001563222016"] = "8 TB"


def HumanFriendlyBytes(bytes, scale, decimals):

	"""
	Convert a integer number of bytes into something legible (10 GB or 25 TiB)
	Base 1000 units = KB, MB, GB, TB, etc.
	Base 1024 units = KiB, MiB, GiB, TiB, etc.
	"""

	AcceptableScales = [ 1000, 1024 ]

	if not scale in AcceptableScales:
		return "ERROR"

	unit_i = int(math.floor(math.log(bytes, scale)))

	if scale == 1000:
		UNITS = [ "B",  "KB",  "MB",  "GB",  "TB",  "PB",  "EB",  "ZB",  "YB" ]
	if scale == 1024:
		UNITS = [ "B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB" ]

	scaled_units = UNITS[unit_i]
	scaled_size = round(bytes / math.pow(scale, unit_i), decimals)

	return str(scaled_size) + " " + scaled_units


def findRawSize(SD_Device):

	"""
	Fetch raw device size (in bytes) by multiplying "/sys/block/DEV/queue/hw_sector_size"
	by /sys/block/DEV/size
	"""

	secsize = "0"
	numsec  = "0"

	tfile = "/sys/block/" + SD_Device.split("/")[-1] + "/size"
	if os.path.isfile(tfile):
		numsec = SysExec("cat " + tfile).strip()

	tfile = "/sys/block/" + SD_Device.split("/")[-1] + "/queue/hw_sector_size"
	if os.path.isfile(tfile):
		secsize = SysExec("cat " + tfile).strip()

	return int(numsec) * int(secsize)

def findModel(SD_Device):

	file = "/sys/block/" + SD_Device.split("/")[-1] + "/device/model"
	f = open(file, "r")
	model = f.read()
	f.close()

	return model

def findVendor(SD_Device):

	file = "/sys/block/" + SD_Device.split("/")[-1] + "/device/vendor"
	f = open(file, "r")
	vendor = f.read()
	f.close()

	return vendor

# Putting this inside a function so I can use multiprocessing to do
# all of them at once
def returnSmart(SD_Device, ReturnDict):
	ReturnDict[SD_Device] = Device(SD_Device)

# Get a list of block devices
Devs = []

Output = os.listdir("/sys/block")

for line in Output:
	# We don't care about loopback devices
	if re.search("^loop", line):
		continue
	# And if your ram is failing a SMART test, you have problems...
	if re.search("^ram", line):
		continue
	Devs.append("/dev/" + line)

# Use dictionaries to pass classes when using the "multiprocessing" module
ReturnDict = {}

# Ok, now iterate over all block devices and parse SMART info...
if __name__ == '__main__':
	manager = Manager()
	return_dict = manager.dict()
        jobs = []
        for Dev in Devs:
                logging.debug("Spawning defrag process on RID " + Rid)
                p = multiprocessing.Process(target = returnSmart, args=(Dev,return_dict))
                jobs.append(p)
                p.start()

	for proc in jobs:
		proc.join()

	print return_dict.values()


for Dev in Devs:

	HD_Size  = findRawSize(Dev)
	HD_Model = findModel(Dev)

	if HD_Size in Size_Dict:
		HD_Capacity = Size_Dict[HD_Size]
	else:
		HD_Capacity = HumanFriendlyBytes(HD_Size, 1000, 0)

	SAS = 0
	SAS_Models = [ "ST8000NM0075", "ST4000NM0023", "WD4000F9YZ" ]
	if HD_Model in SAS_Models:
		SAS = 1

	if SAS = 0:

		# Pull the SMART stats using pySMART
		Dev_SMART = Device(Dev)

		for attribute in Dev_SMART.all_attributes():

			# These are SMART attributes that we don't want to alert if they are marginal/failing
			IGNORE_THESE_ATTRIBUTES="High_Fly_Writes|Load_Cycle_Count"

		# Fetch info on the remaining SMART attributes...
		smartctl --attributes ${dev} | sed "s/^ *//" | grep "^[1-9]" | awk '{ print $1,$2,$4,$5,$6,$10 }' | egrep -v "(${IGNORE_THESE_ATTRIBUTES})" > ${attr}

		# Fetch the SMART self-test execution status
		status=`smartctl -a ${dev} | grep -A 5 "Self-test execution status" | grep -B 5 "Total time to complete Offline" | grep -v "Total time to complete Offline" | tr "\n" " " | tr "\t" " " | sed "s/  */ /g" | sed "s/( /(/"`

		if [[ "${status}" =~ "The previous self-test completed having the read element of the test failed" ]]; then
			printf "Dev %-9s Rid ${rid} is failing a read-element test ${RMA_Status}\n" ${dev}
		fi

		if [[ "${status}" =~ "The previous self-test completed having a test element that failed and the test element that failed is not known" ]]; then
			printf "Dev %-9s Rid ${rid} is failing a test-element test ${RMA_Status}\n" ${dev}
		fi

		# Iterate over all SMART attributes
		for attribute in `cat ${attr} | grep "^[1-9]" | cut -d " " -f 1`
		do

			  ATTR_NAME=`cat ${attr} | grep "^${attribute} " | cut -d " " -f 2`
			CURRENT_VAL=`cat ${attr} | grep "^${attribute} " | cut -d " " -f 3 | sed "s/^0*//"` ; [ -z "${CURRENT_VAL}" ] && CURRENT_VAL=0
			MAXIMUM_VAL=`cat ${attr} | grep "^${attribute} " | cut -d " " -f 4 | sed "s/^0*//"` ; [ -z "${MAXIMUM_VAL}" ] && MAXIMUM_VAL=0
			 THRESH_VAL=`cat ${attr} | grep "^${attribute} " | cut -d " " -f 5 | sed "s/^0*//"` ; [ -z "${THRESH_VAL}"  ] && THRESH_VAL=0
			   REAL_VAL=`cat ${attr} | grep "^${attribute} " | cut -d " " -f 6 | sed "s/^0*//"` ; [ -z "${REAL_VAL}"    ] && REAL_VAL=0

			################################
			### Begin special case handling
			################################

			# This is a corner case where the val and thresh are all 0.  Just ignore
			if [ "${CURRENT_VAL}" -eq "0" -a "${MAXIMUM_VAL}" -eq "0" -a "${THRESH_VAL}" -eq "0" ]; then
				# There's no good way to know if the drive is actually failing, or if this test is screwy.  Just skip.
				continue
			fi

			# One Intel SSD has a buggy 233 Media_Wearout_Indicator, so ignore that special case
			is_bad_intel_ssd=`cat ${lsblock} | grep " ${dev} " | grep SSDSA2M040G2GC | wc -l`
			if [ "${attribute}" -eq "233" -a "${is_bad_intel_ssd}" -eq "1" ]; then
				continue
			fi

			# This is another indicator of a drive going bad that doesn't officially fail SMART
			THRESH_197="500"
			if [ "${attribute}" -eq "197" ]; then
				if [ "${REAL_VAL}" -ge "${THRESH_197}" ]; then
					printf "Dev %-9s Rid ${rid} has a 197_Current_Pending_Sector value over ${THRESH_197} ${RMA_Status}\n" ${dev}
				fi
			fi

			################################
			### End special case handling
			################################

			DELTA_CURRENT=`echo "${CURRENT_VAL}-${THRESH_VAL}" | bc -l`

			if [ "${DELTA_CURRENT}" -le "0" ]; then
				printf "Dev %-9s Rid ${rid} ${disk_type} is failing  on SMART attribute %-3s ${ATTR_NAME} ${RMA_Status}\n" ${dev} ${attribute}
			elif [ "${DELTA_CURRENT}" -lt "10" -a "${DELTA_CURRENT}" -gt 0 -a "${THRESH_VAL}" -lt "50" ]; then
				printf "Dev %-9s Rid ${rid} ${disk_type} is marginal on SMART attribute %-3s ${ATTR_NAME} ${RMA_Status}\n" ${dev} ${attribute}
			fi
		done
	else
		# Assume drive is SAS

		Defects=`smart_attributes ${dev} | grep 9000_SAS_Grown_Defect_List | awk '{ print $2 }'`

		if [ -n "${Defects}" ]; then

			if [ "${Defects}" -gt "0" ]; then

				if [ "${Defects}" -gt "50" ]; then
					printf "Dev %-9s Rid ${rid} has a critically-high number of defects (${Defects} defects)\n" ${dev}
				else
					printf "Dev %-9s Rid ${rid} has a non-zero number of defects (${Defects} defects)\n" ${dev}
				fi
			fi
		fi

	fi
done

rm -f ${attr} ${lsslot} ${lsblock} ${blkid}
