#!/usr/bin/env python3

"""
Enumerate_Backplanes - create an easy-to-use table to reference backplanes
"""

import re
import os
import sys
import math
import time

from subprocess import Popen, PIPE, STDOUT

# Cache info
CacheDataArray = {}
CacheTimeArray = {}

# Enable/disable debugging messages
Print_Debug = False

def Debug(text):

        """
        A wrapper to print debugging info on a single line.
        """

        if Print_Debug:
                print("DEBUG: " + text)
        return


def SysExec(cmd):

        """
        Run the given command and return the output
        """

        # Cache the output of the command for 20 seconds
        Cache_Expires = 20

        # Computed once, used twice
        Cache_Keys = list(CacheDataArray.keys())
        if cmd in Cache_Keys:
                Cache_Age  = time.time() - CacheTimeArray[cmd]
        else:
                Cache_Age  = 0

        Return_Val = "ERROR"

        # If we have valid data cached, return it
        if cmd in Cache_Keys and Cache_Age < Cache_Expires:
                Return_Val = CacheDataArray[cmd]

        # If the cmd is "cat", use fopen/fread/fclose to open it and
        # cache it as we go
        elif not cmd in Cache_Keys and cmd.split()[0] == "cat":
                f = open(cmd.split()[1], "r")
                CacheDataArray[cmd] = f.read()
                CacheTimeArray[cmd] = time.time()
                f.close()
                Return_Val = CacheDataArray[cmd]

        # If we don't have cached data, or it's too old, regenerate it
        elif not cmd in Cache_Keys or Cache_Age > Cache_Expires:
                CacheDataArray[cmd] = Popen(cmd.split(), stdout=PIPE, stderr=STDOUT).communicate()[0]
                CacheTimeArray[cmd] = time.time()
                Return_Val = CacheDataArray[cmd]

        if str(type(Return_Val)) == "<class 'bytes'>":
                Return_Val = Return_Val.decode("utf-8")

        return Return_Val


def PrettyPrint(Dict_To_Print, PrettyNames_Dict):

	print_list  = PrettyNames_Dict.keys()
	pretty_list = PrettyNames_Dict.values()

	# Rename columns to their pretty_name equivalents
	for bd in Dict_To_Print:
		for o_key, n_key in PrettyNames_Dict.items():
			Dict_To_Print[bd][n_key] = Dict_To_Print[bd].pop(o_key)

	# Measure the width of the column titles
	ParamLength = {}
	for bd, dict in Dict_To_Print.items():
		for key, val in dict.items():
			if not key in pretty_list:
				continue
			ParamLength[key] = key.__len__()

	# Measure the width of the data entries
	for bd, dict in Dict_To_Print.items():
		for key, val in dict.items():
			if not key in pretty_list:
				continue

			if isinstance(val, str):
				ValueLength = val.__len__()
			elif isinstance(val, int):
				ValueLength = math.log10(float(val) + 0.001)
				if ValueLength < 0:
					ValueLength = 1
				ValueLength = int(math.floor(ValueLength))

			ParamLength[key] = max(ValueLength, ParamLength[key])

	# Create a format statement of the appropriate length
	TOTALLENGTH = 0
	FORMAT=""
	for param in ParamLength:
		FORMAT = FORMAT + " %-" + str(ParamLength[param] + 2) + "s "
		TOTALLENGTH = TOTALLENGTH + ParamLength[param] + 4
	TOTALLENGTH = TOTALLENGTH - 2

	# Print it and done...
	print("")
	print(FORMAT % tuple(pretty_list))
	print("=" * TOTALLENGTH)

	for bd, dict in Dict_To_Print.items():
		printline = []
		for key, val in dict.items():

			if not key in pretty_list:
				continue
			printline.append(val)
		print(FORMAT % tuple(printline))
	print("")


def List_Enclosures():

	"""
	List enclosures.
	"""

	# Our current depots have 24 slots on the Front backplane and 12 on the Rear
	# In a more complex setup, we might need a more cumbersome way to alias backplanes
	Alias_by_NumSlots = {}
	Alias_by_NumSlots["24"] = "Front"
	Alias_by_NumSlots["12"] = "Back"

	# Array to hold the output for pretty printing
	Output = []

	Enclosure_Raw = SysExec("lsscsi -g")
	for line in Enclosure_Raw.splitlines():

		if not re.search("enclosu", line):
			continue

		if re.search("VirtualSES", line):
			continue

		Debug("line = " + line)

		SG_Dev = line.split()[-1]

		SG_Bus = line.split()[0]
		SG_Bus = re.sub("\[", "", SG_Bus)
		SG_Bus = re.sub("\]", "", SG_Bus)

		SAS_Addr = "UNKNOWN_SAS"
		SAS_Addr_Raw = SysExec("sg_ses --page=aes " + SG_Dev)
		for text in SAS_Addr_Raw.splitlines():
			if re.search("Primary enclosure logical identifier", text):
				SAS_Addr = text.split(":")[1]
				SAS_Addr = re.sub(" ", "", SAS_Addr)

		Num_Slots = "UNKNOWN_SLOTS"
		Num_Slots_Raw  = SysExec("sg_ses --page=cf " + SG_Dev)
		match = re.search(r'Array device slot(.*)ArrayDevicesInSubEnclsr0', Num_Slots_Raw, re.DOTALL)
		match = match.group(0)
		for l in match.splitlines():
			if re.search("number of possible elements", l):
				Num_Slots = l.split(":")[-1]
				Num_Slots = re.sub(" ", "", Num_Slots)


		Alias = "UNKNOWN_ALIAS"
		if Num_Slots in Alias_by_NumSlots:
			Alias = Alias_by_NumSlots[Num_Slots]

		Output.append([SG_Dev, Num_Slots, SG_Bus, SAS_Addr, Alias])

	return(Output)

Enclosures = List_Enclosures()

if not Enclosures:
	print("INFO:  No enclosures found.")
	sys.exit(0)

Headers = ["SG_Dev", "Num_Slots", "SG_Bus", "SAS_Addr", "Alias"]

Enclosures_dict = {}
c = 0
for i in Enclosures:
	Enclosures_dict[c] = dict(zip(Headers, i))
	c = c + 1

PrettyPrint(Enclosures_dict, dict(zip(Headers, Headers)))
